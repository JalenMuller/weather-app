{"version":3,"sources":["assets/images/icon-location.svg","components/Logo.js","assets/images/icon-sunrise.svg","components/WeatherCard.js","components/LoadingSpinner.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["Logo","className","convertUnixTimestamp","timestamp","date","Date","hours","getHours","minutes","getMinutes","getSeconds","substr","getCelsius","temp","Math","round","WeatherCard","props","currentTempCelsius","weather","feelsLikeTempCelsius","feels_like","console","log","maxTempCelsius","temp_max","minTempCelsius","temp_min","sunrise","sunset","city","src","icon","size","descp","humidity","press","LoadingSpinner","SearchBar","useState","showLocationDiv","setLocationDiv","type","placeholder","onKeyPress","e","charCode","preventDefault","getWeather","onFocus","onBlur","onMouseDown","getLocalWeather","color","App","loading","setLoading","setWeather","setCity","setUserLocation","baseURL","apiKey","a","target","value","url","axios","get","req","res","saveWeather","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","long","longitude","data","name","description","main","pressure","sys","PageBody","React","useRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d66a695.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-location.69d0eb5c.svg\";","function Logo(){\r\n    return(\r\n        <h1 className=\"logo\">React Weather App</h1>\r\n    )\r\n}\r\nexport default Logo","export default __webpack_public_path__ + \"static/media/icon-sunrise.5bac81b9.svg\";","import React from \"react\";\r\nimport sunriseIcon from \"../assets/images/icon-sunrise.svg\"\r\nimport { Sunrise, Sunset } from 'react-bootstrap-icons';\r\n\r\nfunction convertUnixTimestamp(timestamp){\r\n\r\n    \r\n    let unix_timestamp = timestamp\r\n    // Create a new JavaScript Date object based on the timestamp\r\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n    let date = new Date(unix_timestamp * 1000);\r\n    // Hours part from the timestamp\r\n    let hours = date.getHours();\r\n    // Minutes part from the timestamp\r\n    let minutes = \"0\" + date.getMinutes();\r\n    // Seconds part from the timestamp\r\n    let seconds = \"0\" + date.getSeconds();\r\n    \r\n    // Will display time in 10:30:23 format\r\n    var formattedTime = hours + ':' + minutes.substr(-2)\r\n    return formattedTime\r\n}\r\nfunction getCelsius(temp){\r\n    // kelvin to celsius\r\n    return Math.round(temp - 273.15);\r\n}\r\n\r\n\r\nconst WeatherCard = (props) => {\r\n\r\n    let currentTempCelsius = getCelsius(props.weather.temp)\r\n    let feelsLikeTempCelsius = getCelsius(props.weather.feels_like)\r\n    console.log(props.weather)\r\n    let maxTempCelsius = getCelsius(props.weather.temp_max)\r\n    let minTempCelsius = getCelsius(props.weather.temp_min)\r\n\r\n    let sunrise = convertUnixTimestamp(props.weather.sunrise)\r\n    let sunset = convertUnixTimestamp(props.weather.sunset)\r\n    console.log(sunrise)\r\n    console.log(sunset)\r\n    return(\r\n        <>\r\n                \r\n                \r\n     <div className=\"weather-container\">          \r\n     <div className=\"weather-bg-block\">\r\n           <span className='weather-card-title'>{props.weather.city}</span>\r\n            <div className=\"weather-details\">\r\n                <div className=\"temp-icon\">\r\n                        <div className=\"mb-10\">{currentTempCelsius}<span className=\"temp\">째C</span></div>\r\n                        <div><img className={'weather-icon'} src={\"http://openweathermap.org/img/wn/\" + props.weather.icon + \"@2x.png\"} /></div>\r\n                    </div>\r\n                    <div>\r\n                    <div className=\"rem-15 m-2\"><Sunrise size={24} className=\"icon-align\"/>{sunrise}</div>\r\n                    <div className=\"rem-15 m-2\"><Sunset size={24}  className=\"icon-align\"/>{sunset}</div>\r\n                    </div>\r\n                </div>\r\n                   \r\n                    <div className=\"weather-details-descp\">{props.weather.descp}</div>\r\n                    \r\n      </div>\r\n      \r\n        <div className=\"weather-card\">\r\n                <div className=\"weather-info\">\r\n                    {/*todo gevoelstemperatuur*/}\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div>Feels like:</div>\r\n                        <div>{feelsLikeTempCelsius}<span className=\"temp-small\">째C</span></div>\r\n                    </div>\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div>Min Temp:</div>\r\n                        <div>{minTempCelsius}<span className=\"temp-small\">째C</span></div>\r\n                    </div>\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div>Max Temp:</div>\r\n                        <div>{maxTempCelsius}<span className=\"temp-small\">째C</span></div>\r\n                    </div>\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div>Humidity:</div>\r\n                        <div>{props.weather.humidity} %</div>\r\n                    </div>\r\n                    <div className=\"weather-info-item\">\r\n                        <div>Pressure:</div>\r\n                        <div>{props.weather.press} mb</div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n// \r\nexport default WeatherCard\r\n","import React from 'react'\r\n\r\nfunction LoadingSpinner(props){\r\n\r\n    // if(props.status === 'loading' ){\r\n        return(\r\n            <div className=\"spinner-box\">\r\n            <div className=\"spinner\"></div>\r\n            </div>\r\n        )\r\n    // }\r\n    return null\r\n}\r\nexport default LoadingSpinner","import { GeoFill } from 'react-bootstrap-icons';\r\nimport {useState} from 'react'\r\n\r\nfunction SearchBar(props){\r\n    const [showLocationDiv, setLocationDiv] = useState(false)\r\n    \r\n    const search = (e) => {\r\n        \r\n        if (e.charCode === 13) {\r\n            e.preventDefault()\r\n            setLocationDiv(false)\r\n        props.getWeather(e)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"search-content\">\r\n        <input type=\"text\"\r\n               placeholder=\"Search by city\"\r\n               onKeyPress={search}\r\n               onFocus={() => setLocationDiv(true)}\r\n               onBlur={() => setLocationDiv(false)}\r\n               className=\"search-input\"\r\n        />\r\n        {showLocationDiv &&\r\n        <div className=\"use-location\" onMouseDown={props.getLocalWeather}><GeoFill color=\"#ff4800\" size={24} className=\"geo-fill\"/>Or use your location</div>\r\n        }\r\n        {/* <button className=\"search-button\" onClick={getWeather}><img src={searchIcon}/></button> */}\r\n        {/* <button className=\"search-button\" onClick={getLocalWeather}><img className=\"small-icon\" src={locationIcon}/></button> */}\r\n</div>\r\n    )\r\n}\r\nexport default SearchBar","import React from 'react'\r\nimport { useState } from 'react'\r\nimport searchIcon from \"./assets/images/search-icon.png\"\r\nimport locationIcon from \"./assets/images/icon-location.svg\"\r\nimport Logo from \"./components/Logo\";\r\nimport \"./App.css\"\r\nimport axios from 'axios'\r\nimport WeatherCard from \"./components/WeatherCard\";\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport SearchBar from './components/SearchBar';\r\n\r\nconst App =  () => {\r\n\r\n    const [loading, setLoading] = useState('idle');\r\n    const [weather, setWeather] = useState('');\r\n    const [locInput, setLocInput] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [userLocation, setUserLocation] = useState('')\r\n    const baseURL = \"https://api.openweathermap.org/\";\r\n    const apiKey = '&appid=1424c156aeca3cc894f12db19e829024'\r\n\r\n    const getWeather = async (e) => {\r\n        setLoading('loading')\r\n        console.log(e.target.value)\r\n        const url = baseURL + \"/data/2.5/weather?q=\"+ e.target.value + apiKey\r\n        const req = await axios.get(url);\r\n        const res = await req;\r\n        console.log(res)\r\n        saveWeather(res)\r\n        setLoading('done')\r\n    }\r\n    // api.openweathermap.org/data/2.5/weather?lat=35&lon=139&appid=1424c156aeca3cc894f12db19e829024\r\n    // api.openweathermap.org/data/2.5/weather?lat=51.973576099999995&lon=4.4609001&appid=&appid=1424c156aeca3cc894f12db19e829024\r\n\r\n\r\n\r\n    const getLocalWeather = async () => {\r\n        if (loading === 'loading'){\r\n            return\r\n        }\r\n        setLoading('loading')\r\n\r\n        const pos =  await new Promise((resolve, reject) => {\r\n            navigator.geolocation.getCurrentPosition(resolve, reject) \r\n            \r\n        })\r\n        \r\n\r\n        await setUserLocation({\r\n            lat: pos.coords.latitude,\r\n            long: pos.coords.longitude\r\n        })\r\n\r\n        const url = baseURL + 'data/2.5/weather?lat=' + pos.coords.latitude + '&lon=' + pos.coords.longitude + apiKey\r\n        const req = await axios.get(url);\r\n        const res = await req;\r\n        console.log(res)\r\n\r\n        saveWeather(res)\r\n        setCity(res.data.name)\r\n\r\n        setLoading('done')\r\n\r\n    };\r\n    const saveWeather = (res) => {\r\n\r\n        setWeather({\r\n            descp: res.data.weather[0].description,\r\n            temp: res.data.main.temp,\r\n            city: res.data.name,\r\n            humidity: res.data.main.humidity,\r\n            press: res.data.main.pressure,\r\n            feels_like: res.data.main.feels_like,\r\n            temp_max: res.data.main.temp_max,\r\n            temp_min: res.data.main.temp_min,\r\n            icon: res.data.weather[0].icon,\r\n            sunrise: res.data.sys.sunrise,\r\n            sunset: res.data.sys.sunset\r\n        })\r\n        console.log(weather)\r\n    }\r\n\r\n\r\n    const handleChange = e => {\r\n        e.preventDefault()\r\n        setLocInput(e.target.value)\r\n        // console.log(userLocation)\r\n\r\n    }\r\n    const handleKeyPress = e => {\r\n        // check if key pressed is enter\r\n        if (e.charCode === 13) {\r\n            e.preventDefault()\r\n            getWeather(e)\r\n        }\r\n\r\n\r\n    }\r\n    const searchInput = React.useRef(null)\r\n\r\n    const PageBody = () =>{\r\n        return(\r\n            <div className=\"page-body\">\r\n                {loading === 'loading' && <LoadingSpinner/>}\r\n                {loading === 'done' ? <WeatherCard weather={weather}/>\r\n                : <p className=\"find-location-text\">Search for your location to get started.</p>}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Logo/>\r\n            <SearchBar getWeather={getWeather} getLocalWeather={getLocalWeather}/>\r\n            <PageBody/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}