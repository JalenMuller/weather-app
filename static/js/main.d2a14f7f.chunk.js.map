{"version":3,"sources":["functions/Translate.js","components/Logo.js","data/axios.js","components/WeatherCard.js","components/LoadingSpinner.js","components/SearchBar.js","assets/images/netherlands.png","assets/images/united-kingdom.png","components/LanguagePopup.js","App.js","reportWebVitals.js","index.js"],"names":["Translate","props","langId","localStorage","getItem","translationStrings","Object","values","translations","string","undefined","defaultString","Logo","className","instance","axios","create","baseURL","convertUnixTimestamp","timestamp","date","Date","getHours","getMinutes","substr","getCelsius","temp","Math","round","WeatherCard","currentTempCelsius","weather","feelsLikeTempCelsius","feels_like","maxTempCelsius","temp_max","minTempCelsius","temp_min","sunrise","sunset","city","src","icon","alt","size","descp","humidity","press","LoadingSpinner","SearchBar","useState","showLocationDiv","setLocationDiv","placeholderText","nl","enGB","console","log","type","placeholder","onKeyPress","e","charCode","preventDefault","getWeather","onFocus","onBlur","onMouseDown","getLocalWeather","color","LanguagePopup","setLang","setItem","window","location","reload","nlFlag","onClick","ukFlag","App","loading","setLoading","setWeather","apiKey","lang","fetchWeather","fetchUrl","a","get","res","alert","data","description","main","name","pressure","sys","target","value","Promise","rej","navigator","geolocation","getCurrentPosition","position","error","pos","coords","latitude","longitude","PageBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2qBA0BeA,MAvBf,SAAmBC,GACf,IAAMC,EAASC,aAAaC,QAAQ,UAC9BC,EAAqBC,OAAOC,OAAOC,GAGrCC,EAAS,GAWb,OARGJ,EAAmB,GAAGH,KACrBO,EAASJ,EAAmB,GAAGH,GAAQD,EAAMQ,cAGlCC,IAAXD,IACAA,EAASR,EAAMU,eAIf,mCACKF,KCdEG,MALf,WACI,OACI,oBAAIC,UAAU,OAAd,SAAqB,cAAC,EAAD,CAAWJ,OAAO,WAAWE,cAAc,yB,gBCEzDG,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,oC,gBCCb,SAASC,EAAqBC,GAG1B,IAGIC,EAAO,IAAIC,KAAsB,IAHhBF,GAWrB,OANYC,EAAKE,WAKW,KAHd,IAAMF,EAAKG,cAGiBC,QAAQ,GAGtD,SAASC,EAAWC,GAEhB,OAAOC,KAAKC,MAAMF,EAAO,QAI7B,IAqEeG,EArEK,SAAC5B,GAEjB,IAAI6B,EAAqBL,EAAWxB,EAAM8B,QAAQL,MAC9CM,EAAuBP,EAAWxB,EAAM8B,QAAQE,YAChDC,EAAiBT,EAAWxB,EAAM8B,QAAQI,UAC1CC,EAAiBX,EAAWxB,EAAM8B,QAAQM,UAE1CC,EAAUpB,EAAqBjB,EAAM8B,QAAQO,SAC7CC,EAASrB,EAAqBjB,EAAM8B,QAAQQ,QAChD,OACI,mCACHtC,EAAM8B,SACN,sBAAKlB,UAAU,oBAAf,UACA,sBAAKA,UAAU,mBAAf,UACM,sBAAMA,UAAU,qBAAhB,SAAsCZ,EAAM8B,QAAQS,OACnD,sBAAK3B,UAAU,kBAAf,UACI,sBAAKA,UAAU,YAAf,UACQ,sBAAKA,UAAU,QAAf,UAAwBiB,EAAmB,sBAAMjB,UAAU,OAAhB,sBAC3C,8BAEA,qBACAA,UAAW,eACX4B,IAAK,oCAAsCxC,EAAM8B,QAAQW,KAAO,UAChEC,IAAK1C,EAAM8B,QAAQW,YAKvB,gCACA,sBAAK7B,UAAU,aAAf,UAA4B,cAAC,IAAD,CAAS+B,KAAM,GAAI/B,UAAU,eAAeyB,KACxE,sBAAKzB,UAAU,aAAf,UAA4B,cAAC,IAAD,CAAQ+B,KAAM,GAAK/B,UAAU,eAAe0B,WAIxE,qBAAK1B,UAAU,wBAAf,SAAwCZ,EAAM8B,QAAQc,WAIlE,qBAAKhC,UAAU,eAAf,SACQ,sBAAKA,UAAU,eAAf,UAEI,sBAAKA,UAAU,qCAAf,UACI,gCAAK,cAAC,EAAD,CAAWJ,OAAO,aAAaE,cAAc,eAAlD,OACA,gCAAMqB,EAAqB,sBAAMnB,UAAU,aAAhB,yBAE/B,sBAAKA,UAAU,qCAAf,UACI,4CACA,gCAAMuB,EAAe,sBAAMvB,UAAU,aAAhB,yBAEzB,sBAAKA,UAAU,qCAAf,UACI,4CACA,gCAAMqB,EAAe,sBAAMrB,UAAU,aAAhB,yBAEzB,sBAAKA,UAAU,qCAAf,UACI,gCAAK,cAAC,EAAD,CAAWJ,OAAO,WAAWE,cAAc,gBAAhD,OACA,gCAAMV,EAAM8B,QAAQe,SAApB,WAEJ,sBAAKjC,UAAU,oBAAf,UACI,gCAAK,cAAC,EAAD,CAAWJ,OAAO,WAAWE,cAAc,aAAhD,OACA,gCAAMV,EAAM8B,QAAQgB,MAApB,uBC1ETC,MATf,SAAwB/C,GAEhB,OACI,qBAAKY,UAAU,cAAf,SACA,qBAAKA,UAAU,e,QCgCZoC,MAlCf,SAAmBhD,GACf,MAA0CiD,oBAAS,GAAnD,mBAAOC,EAAP,KAAwBC,EAAxB,KACMlD,EAASC,aAAaC,QAAQ,UAC9BiD,EAAkB,CACpBC,GAAI,sBACJC,KAAM,wBAWV,OADAC,QAAQC,IAAIJ,EAAgBnD,IAExB,sBAAKW,UAAU,iBAAf,UACA,qBAAKA,UAAU,eACf,uBAAO6C,KAAK,OACLC,YAAcN,EAAgBnD,GAC9B0D,WAdI,SAACC,GAEO,KAAfA,EAAEC,WACFD,EAAEE,iBACFX,GAAe,GACfnD,EAAM+D,WAAWH,KAUdI,QAAS,kBAAMb,GAAe,IAC9Bc,OAAQ,kBAAMd,GAAe,IAC7BvC,UAAU,iBAEhBsC,GACD,sBAAKtC,UAAU,eAAesD,YAAalE,EAAMmE,gBAAjD,UAAkE,cAAC,IAAD,CAASC,MAAM,UAAUzB,KAAM,GAAI/B,UAAU,aAAY,cAAC,EAAD,CAAWJ,OAAO,eAAeE,cAAc,gCC/BnK,MAA0B,wCCA1B,MAA0B,2CC0B1B2D,MAvBf,WACI,IAAMpE,EAASC,aAAaC,QAAQ,UAE9BmE,EAAU,SAACrE,GACbC,aAAaqE,QAAQ,SAAUtE,GAC/BuE,OAAOC,SAASC,QAAO,IAG3B,OAAIzE,EACO,KAGH,sBAAKW,UAAU,aAAf,UACI,mBAAGA,UAAU,oBAAb,kCACA,sBAAKA,UAAU,aAAf,UACI,qBAAK4B,IAAKmC,EAAQjC,IAAI,QAAQ9B,UAAU,YAAYgE,QAAS,kBAAMN,EAAQ,SAC3E,qBAAK9B,IAAKqC,EAAQnC,IAAI,eAAe9B,UAAU,YAAYgE,QAAS,kBAAMN,EAAQ,kBCiHvFQ,EAzHF,WACT,MAA8B7B,mBAAS,QAAvC,mBAAO8B,EAAP,KAAgBC,EAAhB,KACA,EAA8B/B,mBAAS,IAAvC,mBAAOnB,EAAP,KAAgBmD,EAAhB,KAEMC,EAAS,0CACTjF,EAASC,aAAaC,QAAQ,UAE9BgF,EAAI,gBAAYlF,GAPP,SAQAmF,EARA,8EAQf,WAA4BC,GAA5B,eAAAC,EAAA,+EAGgBxE,EAAMyE,IAAIF,GAH1B,OAGIG,EAHJ,8DAKQC,MAAM,4BALd,kCAUIR,EAAW,CACPrC,MAAO4C,EAAIE,KAAK5D,QAAQ,GAAG6D,YAC3BlE,KAAM+D,EAAIE,KAAKE,KAAKnE,KACpBc,KAAMiD,EAAIE,KAAKG,KACfhD,SAAU2C,EAAIE,KAAKE,KAAK/C,SACxBC,MAAO0C,EAAIE,KAAKE,KAAKE,SACrB9D,WAAYwD,EAAIE,KAAKE,KAAK5D,WAC1BE,SAAUsD,EAAIE,KAAKE,KAAK1D,SACxBE,SAAUoD,EAAIE,KAAKE,KAAKxD,SACxBK,KAAM+C,EAAIE,KAAK5D,QAAQ,GAAGW,KAC1BJ,QAASmD,EAAIE,KAAKK,IAAI1D,QACtBC,OAAQkD,EAAIE,KAAKK,IAAIzD,SAGzBpC,aAAaqE,QAAQ,iBAAkBiB,EAAIE,KAAKG,MAxBpD,kBA0BWL,GA1BX,0DARe,sBAqCf,IAAMzB,EAAU,uCAAG,WAAOH,GAAP,eAAA0B,EAAA,yDACA,YAAZP,EADY,wDAEfC,EAAW,WACPK,EAAW,uBAAwBzB,EAAEoC,OAAOC,MAAQf,EAASC,EAHlD,SAITC,EAAaC,GAJJ,OAKfL,EAAW,QALI,2CAAH,sDA6BhB,IAAMb,EAAe,uCAAG,kCAAAmB,EAAA,yDACL,YAAZP,EADiB,wDAEpBC,EAAW,WAFS,SApBb,IAAIkB,SAAQ,SAACV,EAAKW,GAEjBC,UAAUC,YACZD,UAAUC,YAAYC,oBAKxB,SAAiBC,GACff,EAAIe,MAGN,SAAeC,GACbjD,QAAQC,IAAI,+EARZD,QAAQC,IAAI,8DAeE,cAGdiD,EAHc,OAIpBlD,QAAQC,IAAIiD,EAAIC,QACZC,EAAWF,EAAIC,OAAOC,SACtBC,EAAYH,EAAIC,OAAOE,UAC3BrD,QAAQC,IAAIiD,EAAIC,OAAOE,WACjBvB,EAAW,wBAA0BsB,EAAW,QAAUC,EAAY1B,EARxD,UASdE,EAAaC,GATC,QAUpBL,EAAW,QAVS,4CAAH,qDA6Bf6B,EAAW,WACb,OACI,sBAAKjG,UAAU,YAAf,UACiB,YAAZmE,GAAyB,cAAC,EAAD,IACb,SAAZA,EACD,cAAC,EAAD,CAAajD,QAASA,IACtB,mBAAGlB,UAAU,qBAAb,SAAkC,cAAC,EAAD,CAAWJ,OAAO,cAAcE,cAAc,2BAEhF,cAAC,EAAD,QASZ,OACI,sBAAKE,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWmD,WAAYA,EAAYI,gBAAiBA,IACpD,cAAC0C,EAAD,QCnHGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2a14f7f.chunk.js","sourcesContent":["import React from 'react'\r\nimport translations from '../data/translations.json'\r\n\r\nfunction Translate(props) {\r\n    const langId = localStorage.getItem('langId')\r\n    const translationStrings = Object.values(translations);\r\n\r\n    \r\n    let string = ''\r\n\r\n    // Translate will look for a string in the JSON file\r\n    if(translationStrings[0][langId]){\r\n        string = translationStrings[0][langId][props.string]\r\n    }\r\n    // If the string wasn't found it will use the default string passed through props\r\n    if (string === undefined){\r\n        string = props.defaultString\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {string}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Translate\r\n","import Translate from \"../functions/Translate\"\r\n\r\nfunction Logo(){\r\n    return(\r\n        <h1 className=\"logo\"><Translate string=\"app-name\" defaultString=\"React Weather App\"/></h1>\r\n    )\r\n}\r\nexport default Logo","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.openweathermap.org/\"\r\n});\r\n\r\nexport default instance","import React from \"react\";\r\nimport Translate from \"../functions/Translate\";\r\nimport { Sunrise, Sunset } from 'react-bootstrap-icons';\r\n\r\nfunction convertUnixTimestamp(timestamp){\r\n\r\n    \r\n    let unix_timestamp = timestamp\r\n    // Create a new JavaScript Date object based on the timestamp\r\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n    let date = new Date(unix_timestamp * 1000);\r\n    // Hours part from the timestamp\r\n    let hours = date.getHours();\r\n    // Minutes part from the timestamp\r\n    let minutes = \"0\" + date.getMinutes();\r\n    \r\n    // Will display time in 10:30:23 format\r\n    var formattedTime = hours + ':' + minutes.substr(-2)\r\n    return formattedTime\r\n}\r\nfunction getCelsius(temp){\r\n    // kelvin to celsius\r\n    return Math.round(temp - 273.15);\r\n}\r\n\r\n\r\nconst WeatherCard = (props) => {\r\n\r\n    let currentTempCelsius = getCelsius(props.weather.temp)\r\n    let feelsLikeTempCelsius = getCelsius(props.weather.feels_like)\r\n    let maxTempCelsius = getCelsius(props.weather.temp_max)\r\n    let minTempCelsius = getCelsius(props.weather.temp_min)\r\n\r\n    let sunrise = convertUnixTimestamp(props.weather.sunrise)\r\n    let sunset = convertUnixTimestamp(props.weather.sunset)\r\n    return(\r\n        <>\r\n    {props.weather &&      \r\n     <div className=\"weather-container\">          \r\n     <div className=\"weather-bg-block\">\r\n           <span className='weather-card-title'>{props.weather.city}</span>\r\n            <div className=\"weather-details\">\r\n                <div className=\"temp-icon\">\r\n                        <div className=\"mb-10\">{currentTempCelsius}<span className=\"temp\">Â°C</span></div>\r\n                        <div>\r\n                        \r\n                        <img \r\n                        className={'weather-icon'} \r\n                        src={\"http://openweathermap.org/img/wn/\" + props.weather.icon + \"@2x.png\"} \r\n                        alt={props.weather.icon}    \r\n                        />\r\n                        \r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                    <div className=\"rem-15 m-2\"><Sunrise size={24} className=\"icon-align\"/>{sunrise}</div>\r\n                    <div className=\"rem-15 m-2\"><Sunset size={24}  className=\"icon-align\"/>{sunset}</div>\r\n                    </div>\r\n                </div>\r\n                   \r\n                    <div className=\"weather-details-descp\">{props.weather.descp}</div>\r\n                    \r\n      </div>\r\n      \r\n        <div className=\"weather-card\">\r\n                <div className=\"weather-info\">\r\n                    {/*todo gevoelstemperatuur*/}\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div><Translate string=\"feels-like\" defaultString=\"Feels Like\"/>:</div>\r\n                        <div>{feelsLikeTempCelsius}<span className=\"temp-small\">Â°C</span></div>\r\n                    </div>\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div>Min Temp:</div>\r\n                        <div>{minTempCelsius}<span className=\"temp-small\">Â°C</span></div>\r\n                    </div>\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div>Max Temp:</div>\r\n                        <div>{maxTempCelsius}<span className=\"temp-small\">Â°C</span></div>\r\n                    </div>\r\n                    <div className=\"weather-info-item border-btm-white\">\r\n                        <div><Translate string=\"humidity\" defaultString=\"Vochtigheid\"/>:</div>\r\n                        <div>{props.weather.humidity} %</div>\r\n                    </div>\r\n                    <div className=\"weather-info-item\">\r\n                        <div><Translate string=\"pressure\" defaultString=\"Pressure\"/>:</div>\r\n                        <div>{props.weather.press} mb</div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        </div>\r\n          }\r\n        </>\r\n    )\r\n}\r\n// \r\nexport default WeatherCard\r\n","import React from 'react'\r\n\r\nfunction LoadingSpinner(props){\r\n    \r\n        return(\r\n            <div className=\"spinner-box\">\r\n            <div className=\"spinner\"></div>\r\n            </div>\r\n        )\r\n\r\n}\r\nexport default LoadingSpinner","import { GeoFill } from 'react-bootstrap-icons';\r\nimport {useState} from 'react'\r\nimport Translate from '../functions/Translate';\r\n\r\nfunction SearchBar(props){\r\n    const [showLocationDiv, setLocationDiv] = useState(false)\r\n    const langId = localStorage.getItem('langId')\r\n    const placeholderText = {\r\n        nl: 'Zoek naar jouw stad',\r\n        enGB: 'Search for your city'\r\n    }\r\n    const search = (e) => {\r\n        \r\n        if (e.charCode === 13) {\r\n            e.preventDefault()\r\n            setLocationDiv(false)\r\n            props.getWeather(e)\r\n        }\r\n    }\r\n    console.log(placeholderText[langId])\r\n    return(\r\n        <div className=\"search-content\">\r\n        <div className=\"search-bar\"/>\r\n        <input type=\"text\"\r\n               placeholder= {placeholderText[langId]}\r\n               onKeyPress={search}\r\n               onFocus={() => setLocationDiv(true)}\r\n               onBlur={() => setLocationDiv(false)}\r\n               className=\"search-input\"\r\n        />\r\n        {showLocationDiv &&\r\n        <div className=\"use-location\" onMouseDown={props.getLocalWeather}><GeoFill color=\"#ff4800\" size={24} className=\"geo-fill\"/><Translate string=\"use-location\" defaultString=\"Or use your location\"/></div>\r\n        }\r\n        {/* <button className=\"search-button\" onClick={getWeather}><img src={searchIcon}/></button> */}\r\n        {/* <button className=\"search-button\" onClick={getLocalWeather}><img className=\"small-icon\" src={locationIcon}/></button> */}\r\n</div>\r\n    )\r\n}\r\nexport default SearchBar","export default __webpack_public_path__ + \"static/media/netherlands.815c4f29.png\";","export default __webpack_public_path__ + \"static/media/united-kingdom.5233f022.png\";","import React from 'react'\r\nimport nlFlag from \"../assets/images/netherlands.png\"\r\nimport ukFlag from \"../assets/images/united-kingdom.png\"\r\nfunction LanguagePopup() {\r\n    const langId = localStorage.getItem('langId')\r\n\r\n    const setLang = (langId) => {\r\n        localStorage.setItem('langId', langId)\r\n        window.location.reload(false);\r\n    }\r\n\r\n    if (langId){\r\n        return(null)\r\n    } else {\r\n        return (\r\n            <div className=\"lang-popup\">\r\n                <p className=\"center-text rem-3\">Choose your language</p>\r\n                <div className=\"flag-icons\">\r\n                    <img src={nlFlag} alt=\"Dutch\" className=\"flag-icon\" onClick={() => setLang('nl')}/>\r\n                    <img src={ukFlag} alt=\"English (US)\" className=\"flag-icon\" onClick={() => setLang('enGB')}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LanguagePopup\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\nimport Logo from \"./components/Logo\";\r\nimport \"./App.css\"\r\nimport axios from './data/axios'\r\nimport WeatherCard from \"./components/WeatherCard\";\r\nimport LoadingSpinner from './components/LoadingSpinner';\r\nimport SearchBar from './components/SearchBar';\r\nimport LanguagePopup from './components/LanguagePopup';\r\nimport Translate from './functions/Translate';\r\n\r\nconst App =  () => {\r\n    const [loading, setLoading] = useState('idle');\r\n    const [weather, setWeather] = useState('');\r\n\r\n    const apiKey = \"&appid=1424c156aeca3cc894f12db19e829024\"\r\n    const langId = localStorage.getItem('langId')\r\n\r\n    const lang = `&lang=${langId}`\r\n    async function fetchWeather(fetchUrl){\r\n        let res\r\n        try{\r\n        res = await axios.get(fetchUrl)\r\n        }catch{\r\n            alert('Your city was not found.')\r\n            return\r\n        }\r\n     \r\n\r\n        setWeather({\r\n            descp: res.data.weather[0].description,\r\n            temp: res.data.main.temp,\r\n            city: res.data.name,\r\n            humidity: res.data.main.humidity,\r\n            press: res.data.main.pressure,\r\n            feels_like: res.data.main.feels_like,\r\n            temp_max: res.data.main.temp_max,\r\n            temp_min: res.data.main.temp_min,\r\n            icon: res.data.weather[0].icon,\r\n            sunrise: res.data.sys.sunrise,\r\n            sunset: res.data.sys.sunset\r\n        })\r\n\r\n        localStorage.setItem('recentLocation', res.data.name)\r\n\r\n        return res\r\n    }\r\n\r\n    const getWeather = async (e) => {\r\n        if(loading === 'loading') return\r\n        setLoading('loading')\r\n        let fetchUrl = \"/data/2.5/weather?q=\"+ e.target.value + apiKey + lang\r\n        await fetchWeather(fetchUrl)\r\n        setLoading('done')\r\n    }\r\n    function getPosition() {\r\n\r\n        return new Promise((res, rej) => {\r\n \r\n            if (navigator.geolocation) {\r\n              navigator.geolocation.getCurrentPosition(success, error);\r\n            } else {\r\n              console.log(\"Sorry, your browser does not support HTML5 geolocation.\");\r\n            }\r\n        \r\n            function success(position) {\r\n              res(position)\r\n            }\r\n        \r\n            function error(error) {\r\n              console.log(\"Sorry, we can't retrieve your local weather without location permission.\");\r\n            }\r\n        \r\n          });\r\n        \r\n        };\r\n\r\n    const getLocalWeather = async () => {\r\n        if(loading === 'loading') return\r\n        setLoading('loading')\r\n        const pos = await getPosition()\r\n        console.log(pos.coords)\r\n        let latitude = pos.coords.latitude\r\n        let longitude = pos.coords.longitude\r\n        console.log(pos.coords.longitude)\r\n        const fetchUrl = 'data/2.5/weather?lat=' + latitude + '&lon=' + longitude + apiKey\r\n        await fetchWeather(fetchUrl)\r\n        setLoading('done')\r\n\r\n    };\r\n\r\n\r\n    // const RecentLocWidget = () => {\r\n    //     const recentLoc = localStorage.getItem('recentLocation')\r\n    //     if (recentLoc){\r\n    //         return(\r\n    //         <div className=\"weather-bg-block\">\r\n    //         <h2>Or use your most recent city</h2>\r\n    //         <h2>{recentLoc}</h2>\r\n    //         </div>\r\n    //         )\r\n    //     } else {\r\n    //         return null\r\n    //     }\r\n    // }\r\n\r\n    const PageBody = () =>{\r\n        return(\r\n            <div className=\"page-body\">\r\n                {loading === 'loading' && <LoadingSpinner/>}\r\n                {loading === 'done' ? \r\n                <WeatherCard weather={weather}/> : \r\n                <p className=\"find-location-text\"><Translate string=\"search-city\" defaultString=\"Search for your city\"/></p>}\r\n                {/* <RecentLocWidget/> */}\r\n                <LanguagePopup/>\r\n                \r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Logo/>\r\n            <SearchBar getWeather={getWeather} getLocalWeather={getLocalWeather}/>\r\n            <PageBody/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}